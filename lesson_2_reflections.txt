What happens when you initialize a repository? Why do you need to do it?
When a repository is initialised, it allows for tracking and making commits. It is needed, since commits cannot be done without a repository being initialised.


How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area differs from the working directory and the repository by allowing the user to manage what files to commit before committing them.


How can you use the staging area to make sure you have one commit per logical change?
The staging area allows the user to see what files are being commited, which helps with ensuring that one commit is made per logical change.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?
When trying an experimental feature, or adding/changing languages. Branches allow for changes in several commits in the code while working on the original code in parallell without the two branches compromising one another.


How do the diagrams help you visualize the branch structure?
Diagrams allow me to visualise how the branches' structures change, and simplifies the process of keeping track of those brances.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Merging two branches together results in merging the changes from both branches into one branch, which in this case was the master branch. 
